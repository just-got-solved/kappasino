from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import random
from typing import List, Dict, Any

app = FastAPI()

# Configura√ß√£o do CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Definindo s√≠mbolos e pagamentos para combina√ß√µes vencedoras
symbols = ["üçí", "üçã", "üçä", "üçâ", "‚≠ê", "üîî", "üçá", "üçÄ", "7Ô∏è‚É£"]  # Adicionado o s√≠mbolo 7Ô∏è‚É£
payouts = {
    "üçí": 10,  # Tr√™s cerejas pagam 10x
    "üçã": 5,   # Tr√™s lim√µes pagam 5x
    "üçä": 3,   # Tr√™s laranjas pagam 3x
    "‚≠ê": 20,   # Tr√™s estrelas pagam 20x
    "7Ô∏è‚É£": 50,  # Tr√™s setes pagam 50x
}

# RTP desejado (Retorno ao jogador)
RTP = 0.90

def generate_spin_result() -> List[List[str]]:
    """Gera uma matriz 3x3 de s√≠mbolos aleat√≥rios."""
    return [[random.choice(symbols) for _ in range(3)] for _ in range(3)]

def calculate_winnings(result: List[List[str]]) -> (int, str):
    """Calcula os ganhos com base nas combina√ß√µes vencedoras e retorna os ganhos e o s√≠mbolo vencedor."""
    winnings = 0
    winning_symbol = None
    
    # Verificar linhas
    for row in result:
        if row[0] == row[1] == row[2]:  # Verifica linhas iguais
            winning_symbol = row[0]
            winnings += payouts.get(winning_symbol, 0)

    # Verificar colunas
    for col in range(3):
        if result[0][col] == result[1][col] == result[2][col]:  # Verifica colunas iguais
            winning_symbol = result[0][col]
            winnings += payouts.get(winning_symbol, 0)

    # Verificar diagonais
    if result[0][0] == result[1][1] == result[2][2]:  # Diagonal principal
        winning_symbol = result[0][0]
        winnings += payouts.get(winning_symbol, 0)
    if result[0][2] == result[1][1] == result[2][0]:  # Diagonal secund√°ria
        winning_symbol = result[0][2]
        winnings += payouts.get(winning_symbol, 0)

    return winnings, winning_symbol

def adjust_winnings(winnings: int) -> int:
    """Ajusta os ganhos com base no RTP e no edge da casa."""
    if winnings > 0:
        house_edge = 1 - RTP
        adjusted_winnings = int(winnings * RTP)

        # Simula a l√≥gica do cassino reter parte dos ganhos
        if random.random() < house_edge:
            winnings = adjusted_winnings
    return winnings

@app.get("/spin")
def spin() -> Dict[str, Any]:
    """Rota para girar a m√°quina e retornar o resultado."""
    result = generate_spin_result()
    winnings, winning_symbol = calculate_winnings(result)
    winnings = adjust_winnings(winnings)
    
    # Mensagem de vit√≥ria
    message = ""
    # Mensagem de vit√≥ria
    if winnings > 0 and winning_symbol:
        if winnings <= 10:
            message = f"üç≠ Voc√™ ganhou! Total de ganhos: {winnings}! Que tal tentar novamente para um pr√™mio maior? üçÄ"
        elif winnings <= 30:
            message = f"üéâ Parab√©ns! Voc√™ ganhou! Total de ganhos: {winnings}! Continue assim, a sorte est√° ao seu lado! üåü"
        elif winnings <= 50:
            message = f"‚ú® Incr√≠vel! Voc√™ ganhou! Total de ganhos: {winnings}! Est√° na hora de celebrar essa vit√≥ria! üéà"
        else:  # Ganhos acima de 50
            message = f"üí∞ Jackpot! Voc√™ fez uma grande jogada! Total de ganhos: {winnings}! √â hora de festejar! üéä"

    return {
        "result": result,
        "winnings": winnings,
        "message": message
    }
